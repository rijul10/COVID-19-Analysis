# -*- coding: utf-8 -*-
"""COVID-19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/172cDbP9yyTnoRxnQAU2bxeQ2-xwri_Ve
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.impute import SimpleImputer
from sklearn.metrics import mean_squared_error

from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv("/content/drive/My Drive/Train_dataset.csv")

df.head()

region = {'Bhubaneshwar':0, 'Chandigarh':3 ,'Delhi':1, 'Chennai':2,'Bengaluru':2}

df['Region'] = [region[item] for item in df['Region']]

df['Region'].value_counts()

df['Region'].isnull().sum()

print(df['Region'].unique())

df.describe()

df.head()

gender = {'Male' : 1, 'Female':0}

df['Gender'] = [gender[item] for item in df['Gender']]

df.Gender.value_counts()

df.isnull().sum()

df = df.drop(["Designation"], axis=1)

df = df.drop(["Name"], axis = 1)

marry = {'YES':0 , 'NO':1}

df.Married = [marry[item] for item in df.Married]

df.Children.value_counts()

df.head(0)

median = df['Children'].median()
df['Children'] = df['Children'].fillna(median)

df['Children'].value_counts()

print(df['Occupation'].value_counts())

df.Occupation = df.Occupation.fillna("Researcher")

occ = {'Legal': 0,
'Sales':            1,
'Manufacturing':    2,
'Researcher':       3,
'Farmer':           4,
'Cleaner'    :      5,
'Clerk'     :       6,
'Driver'   :        7,
'Business':         8}

df['Occupation'] = [occ[item] for item in df.Occupation]

df.Mode_transport.value_counts()

df.Mode_transport = df.Mode_transport.fillna("Public")

modeT = {'Public': 2,
'Walk'      :1,
'Car': 0}

df.Mode_transport = [modeT[item] for item in df.Mode_transport]

df.comorbidity.value_counts()

comor = {'Hypertension':              0,
'None':                      1,
'Diabetes':                  2,
'Coronary Heart Disease':3}

df.comorbidity = df.comorbidity.fillna('None')

df.comorbidity = [comor[item] for item in df.comorbidity]

df.head()

def agegrp(data):
  data.loc[data["Age"]>=40, "age"] = 1
  data.loc[data["Age"]<40,"age"] = 0
  return data

df = agegrp(df)

df["age"] = df["age"].astype(int)
df['Children'] = df['Children'].astype(int)

df.head()

df['Coma score'].value_counts()

data = df

df

def coma(data):
  data.loc[(data['Coma score']>=3) & (data['Coma score']<=8), "coma_score"] = 0
  data.loc[(data['Coma score']>=9) & (data['Coma score']<=12), "coma_score"] = 1
  data.loc[(data['Coma score']>=13) & (data['Coma score']<=15), "coma_score"] = 2
  return data

data = coma(data)

data.coma_score = data.coma_score.astype(int)

data.head()

data['Pulmonary score'].value_counts()

pul = {'<400':0,
'<200'    :1,
'<300'    :2,
'<100'    :3}

data['Pulmonary score'] = [pul[item] for item in data['Pulmonary score']]

data.isnull().sum()

data['cardiological pressure'].value_counts()

data['cardiological pressure'] = data['cardiological pressure'].fillna("Normal")

carpr = {'Normal': 0,
'Stage-01':    2,
'Elevated':    1,
'Stage-02'    :3}

data['cardiological pressure'] = [carpr[item] for item in data['cardiological pressure']]

med = data['Diuresis'].median()
data['Diuresis'] = data['Diuresis'].fillna(med)

med = data['Platelets'].median()
data['Platelets'] = data['Platelets'].fillna(med)

med = data['HBB'].median()
data['HBB'] = data['HBB'].fillna(med)

med = data['d-dimer'].median()
data['d-dimer'] = data['d-dimer'].fillna(med)

med = data['Heart rate'].median()
data['Heart rate'] = data['Heart rate'].fillna(med)

med = data['HDL cholesterol'].median()
data['HDL cholesterol'] = data['HDL cholesterol'].fillna(med)

det = data.drop(['Insurance'], axis = 1)

det = data.drop(['salary'], axis = 1)

# det = det.drop(['Age'], axis = 1)
det = det.drop(['Coma score'], axis = 1)

det = det.drop(['Insurance'],axis = 1)

det['FT/month'] = det['FT/month'].fillna(1)

dete = det[['Region', 'Occupation','Mode_transport','comorbidity','Pulmonary score','cardiological pressure','coma_score']]

det

det = detr.copy()

det

det.isnull().sum()

from sklearn.preprocessing import LabelEncoder, OneHotEncoder

enc = OneHotEncoder(handle_unknown='ignore')
enc.fit(det)

det.columns

dete = det[['Region', 'Occupation','Mode_transport','comorbidity','Pulmonary score','cardiological pressure','coma_score']]

enc.fit(dete)

enc.get_feature_names(['Region', 'Occupation','Mode_transport','comorbidity','Pulmonary score','cardiological pressure','coma_score'])

onehotencoder = OneHotEncoder() 
dete = onehotencoder.fit_transform(dete).toarray()

dete = pd.DataFrame(dete, columns = ['Region_0', 'Region_1', 'Region_2', 'Region_3', 'Occupation_0',
       'Occupation_1', 'Occupation_2', 'Occupation_3', 'Occupation_4',
       'Occupation_5', 'Occupation_6', 'Occupation_7', 'Occupation_8',
       'Mode_transport_0', 'Mode_transport_1', 'Mode_transport_2',
       'comorbidity_0', 'comorbidity_1', 'comorbidity_2', 'comorbidity_3',
       'Pulmonary score_0', 'Pulmonary score_1', 'Pulmonary score_2',
       'Pulmonary score_3', 'cardiological pressure_0',
       'cardiological pressure_1', 'cardiological pressure_2',
       'cardiological pressure_3', 'coma_score_0', 'coma_score_1',
       'coma_score_2'])

res = pd.merge(det, dete, on = det['people_ID'])

res = pd.DataFrame(res)

res = res.drop(columns = ['Region', 'Occupation','Mode_transport','comorbidity','Pulmonary score','cardiological pressure','coma_score'], axis = 1)

res = res.drop(columns = ['Region_3', 'Occupation_8','Mode_transport_2','comorbidity_3','Pulmonary score_3','cardiological pressure_3','coma_score_2'],axis = 1)

res.columns

res.columns

res

res['Blood Glucose'] = (res['Blood Glucose'] - res['Blood Glucose'].mean())/res['Blood Glucose'].std()

det = res.copy()

det = det.drop(['key_0'],axis = 1)

dat = det[det['Infect_Prob']>85]

dat

dat['Age'].value_counts()

test = det['Infect_Prob']
train = det.drop(['Infect_Prob'],axis=1)

train

train = train.drop(['people_ID'],axis = 1)

from sklearn.model_selection import train_test_split
trainX,testX,trainY,testY = train_test_split(train, test, test_size = 0.25, random_state = 42)

import xgboost as xgb
from sklearn import linear_model

lm = linear_model.LinearRegression()
model = lm.fit(trainX,trainY)

predictions = lm.predict(testX)
predictions

testY

rmse = np.sqrt(mean_squared_error(testY, predictions))
print("RMSE: %f" % (rmse))



from sklearn.externals import joblib 
  
# Save the model as a pickle in a file 
joblib.dump(lm, 'LinearInfect1.pkl')