# -*- coding: utf-8 -*-
"""27MarchCOVID-19.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y3RM59PUUevH3UbJr9tshtVjHa_DDxv4
"""

import pandas as pd
import numpy
import matplotlib.pyplot as plt
import matplotlib
matplotlib.rcParams['axes.labelsize'] = 14
matplotlib.rcParams['xtick.labelsize'] = 12
matplotlib.rcParams['ytick.labelsize'] = 12
matplotlib.rcParams['text.color'] = 'k'
from statsmodels.tsa.ar_model import AR
from statsmodels.tsa.arima_model import ARMA
import statsmodels.api as sm
import plotly.graph_objects as go
import plotly.express as px
import plotly.io as pio
pio.templates.default = "plotly_dark"
from plotly.subplots import make_subplots
from matplotlib import pyplot
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn import linear_model
import xgboost as xgb
from sklearn.model_selection import train_test_split

df = pd.read_csv("/content/drive/My Drive/timeseries.csv")

df.head()

df

df['24-Mar-20'] = df['24-Mar-20'].str.replace(',', '')
df['25-Mar-20'] = df['25-Mar-20'].str.replace(',', '')
df['26-Mar-20'] = df['26-Mar-20'].str.replace(',', '')

df['24-Mar-20'] = df['24-Mar-20'].astype(float)
df['25-Mar-20'] = df['25-Mar-20'].astype(float)
df['26-Mar-20'] = df['26-Mar-20'].astype(float)

data = df.transpose()

data = data.astype(int)

data.columns

data.columns = data.columns.values.tolist()

data = numpy.array(data)

data

from statsmodels.tsa.vector_ar.var_model import VAR

lis = []

model = VAR(endog=data)
model_fit = model.fit()
yhat = model_fit.forecast(model_fit.y, steps=1)
lis.append(yhat)

type(lis)

l = [item for sublist in lis for item in sublist]

l = [item for sublist in l for item in sublist]

liss = pd.DataFrame(l, columns=['Infect Prob'])

liss.index

liss.index+=1

liss.to_csv('file3.csv')

liss.columns = ['deuresis']

liss

df = pd.read_csv('/content/drive/My Drive/Train_dataset.csv')

df.columns

detID = df['people_ID']

detID = pd.DataFrame(detID, columns = ['people_ID'])

lisst = pd.merge(detID, liss, on = detID['people_ID'])

lisst

lisst= lisst.drop(['key_0'],axis = 1)

# lisst= lisst.drop(['people_ID'],axis = 1)

lisst

print(lisst['deuresis'].min())
print(lisst['deuresis'].max())
lisst = lisst.sort_values(by=['deuresis'])

lisst.reset_index(drop= True,inplace=True)

lisst.index = lisst.index+1

lisst

lisst['deuresis'][25]

lisst

k=1
t = lisst['deuresis'][1] 
lisst['deuresis'][1] = 1
for i in range(2,10715):
  if(lisst['deuresis'][i]>(t+10)):
    k=k+1
    t = lisst['deuresis'][i]
    lisst['deuresis'][i] = k
  else:
    lisst['deuresis'][i] = k

lisst['deuresis'].value_counts()



df = df[['people_ID','Diuresis','Infect_Prob']]

df['Diuresis'] = df['Diuresis'].fillna(df.Diuresis.mean())

df.isnull().sum()

df['Diuresis']

df = df.sort_values(by=['Diuresis'])

df.reset_index(drop= True,inplace=True)

df['Diuresis'][1]

df.index = df.index+1

k=1
t = df['Diuresis'][1] 
df['Diuresis'][1] = 1
for i in range(2,10715):
  if(df['Diuresis'][i]>t+10):
    k=k+1
    t = df['Diuresis'][i]
    df['Diuresis'][i] = k
  else:
    df['Diuresis'][i] = k

df['Diuresis'][11]

df['Diuresis'].max()

detID = df['people_ID']
# df = df.drop(['people_ID'],axis = 1)

detID = pd.DataFrame(detID, columns = ['people_ID'])

test = df['Infect_Prob']
train = df.drop(['Infect_Prob'],axis = 1)

trainX,testX,trainY,testY = train_test_split(train,test, test_size = 0.2, random_state = 42)

from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.linear_model import ElasticNet
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.ensemble import GradientBoostingRegressor
import xgboost as xgb

knn =  KNeighborsRegressor()
model = knn.fit(trainX,trainY)

# lm = linear_model.LinearRegression()
# model = lm.fit(train,test)

pred = model.predict(lisst)

pred

pred = pd.DataFrame(pred, columns = ['Infect_Prob'])

final = pd.merge(pred, detID, on=detID['people_ID'])

# final = final.drop(['key_0'],axis = 1)

final

final.mean()

final.max().count()

final.drop(['key_0'],axis = 1)

final.max()

final.min().count()

final.to_csv('finalInfect02.csv')

lisst[lisst['people_ID']==2614]

final = final.drop(['key_0'],axis = 1)

final1 = pd.merge(lisst,final,on = final['people_ID'])

final1 = final1.drop(columns = ['people_ID_x','people_ID_y'],axis = 1)

final1.columns

final1.columns = ['people_ID','diuresis','Infect_prob']

final1

test = final1['Infect_prob']
train = final1.drop(['Infect_prob'],axis = 1)

model.fit(train,test)

test1 = pd.read_csv('/content/drive/My Drive/Test_dataset.csv')

test1.columns

test2 = test1[['people_ID','Diuresis']].copy()

test2 = test2.sort_values(by=['Diuresis'])

test2

test2.reset_index(drop = True, inplace = True)

test2.index +=1

k=1
t = test2['Diuresis'][1] 
test2['Diuresis'][1] = 1
for i in range(2,14499):
  if(test2['Diuresis'][i]>t+10):
    k=k+1
    t = test2['Diuresis'][i]
    test2['Diuresis'][i] = k
  else:
    test2['Diuresis'][i] = k

test2

predictions = model.predict(test2)

predictions

predictions = pd.DataFrame(predictions, columns = ['Infect_prob'])

preds = pd.merge(predictions,test2, on = test2['people_ID'])

preds

preds = preds.drop(columns = ['key_0','Diuresis'],axis = 1)

preds.to_csv('27MarchTestInfectProb02.csv')